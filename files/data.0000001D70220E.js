window._bannerflow.registerModule('0000001D70220E',()=>{return {"preloadAssets":[{"id":"604f774d57e4ab0001a1bfd6","type":"font","value":{"id":"604f774d57e4ab0001a1bfd6","src":"https://c.bannerflow.net/fs/api/v2/font?u=https%3A%2F%2Ffonts.bannerflow.net%2Ffontmanagerfonts%2F581700858d987c12245d04b2%2F8586c66f-7c84-4e0e-881c-e8dca530b008.woff&t=%20%28%29%2B%2C.%2F0123578%3AABCDEFHKMNORSTUVWabcdefghiklmnopqrstuvwxy%C2%A3","weight":0,"style":"normal","fontFamilyId":"7858613e-8fd0-4907-8a0c-3587afaa1e31"}},{"id":"604f774c57e4ab0001a1bfd5","type":"font","value":{"id":"604f774c57e4ab0001a1bfd5","src":"https://c.bannerflow.net/fs/api/v2/font?u=https%3A%2F%2Ffonts.bannerflow.net%2Ffontmanagerfonts%2F581700858d987c12245d04b2%2F42eeb52d-4ab8-44ad-9b90-6a5b55a7192c.woff&t=IJNO","weight":0,"style":"normal","fontFamilyId":"7858613e-8fd0-4907-8a0c-3587afaa1e31"}},{"id":"6888c1379157100407f66974","type":"font","value":{"id":"6888c1379157100407f66974","src":"https://c.bannerflow.net/fs/api/v2/font?u=https%3A%2F%2Ffonts.bannerflow.net%2Ffontmanagerfonts%2F581700858d987c12245d04b2%2Fb5fa3df0-4513-4cc0-ad4a-8321c97fec13.woff&t=%2003ABCDEFHMOPRTU%C2%A3","weight":0,"style":"normal","fontFamilyId":"7858613e-8fd0-4907-8a0c-3587afaa1e31"}},{"id":"6728f8863d79339d59043506","type":"font","value":{"id":"6728f8863d79339d59043506","src":"https://c.bannerflow.net/fs/api/v2/font?u=https%3A%2F%2Ffonts.bannerflow.net%2Ffontmanagerfonts%2F581700858d987c12245d04b2%2F56023beb-70cc-46ac-9b49-a56daa4a980b.woff&t=%20ACEFILORSTUY","weight":0,"style":"normal","fontFamilyId":"7858613e-8fd0-4907-8a0c-3587afaa1e31"}},{"id":"5f9c11d7d7d1d200011f1c09","type":"font","value":{"id":"5f9c11d7d7d1d200011f1c09","src":"https://c.bannerflow.net/fs/api/v2/font?u=https%3A%2F%2Ffonts.bannerflow.net%2Ffontmanagerfonts%2F581700858d987c12245d04b2%2Ffc7de181-febe-435e-9178-13401109704d.woff&t=%20CEFMNORSTUW","weight":0,"style":"normal","fontFamilyId":"7858613e-8fd0-4907-8a0c-3587afaa1e31"}}],"data":{"id":"7995b094-de9e-4c25-925b-f513e7c61c79","kind":"creative","width":320,"height":50,"loops":3,"startTime":0,"stopTime":2,"fill":"rgba(255,255,255,1)","preloadImage":{"quality":70,"format":"jpg","frames":[0]},"elements":[{"id":"6adc9214-44b2-4c6b-ad4d-aeba64e46906","kind":"widget","actions":[],"animations":[],"duration":10,"filters":{},"height":50,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":0,"width":320,"x":0,"y":0,"html":"<div id=\"gradient-radial\"></div>\n","css":"html, body {\n    padding: 0;\n    margin: 0;\n}\n#gradient-radial {\n    background: radial-gradient(#e66465, #9198e5);\n    min-width: 100%;\n    min-height: 100%;\n    height: 100%;\n    width: 100%;\n   \n}","js":"Widget.on(WidgetEvent.PropertyChanged, () => {\r\n    var colourone = Widget.properties.colour1;\r\n    var colourtwo = Widget.properties.colour2;\r\n    var stopvalue = Widget.properties.stop;\r\n    var c = document.getElementById(\"gradient-radial\");\r\n    c.style.background = \"radial-gradient(\" + colourone + \",\" + colourtwo + \" \" + stopvalue + \"%)\";\r\n});\r\n","customProperties":[{"name":"colour1","unit":"color","value":"rgba(238,238,238,1)"},{"name":"colour2","unit":"color","value":"rgba(238,238,238,1)"},{"name":"stop","unit":"number","value":100}],"name":"Radial Gradient"},{"id":"048839c9-aa17-4b5a-a66c-90b5f7a0a36c","kind":"rectangle","actions":[],"animations":[{"id":"61223a76-090c-416e-8452-5e5730b0cd51","type":"in","timingFunction":"easeOutExpo","templateId":"slide-in","keyframes":[{"id":"09a15bb5-1ae7-4ceb-9989-d07b80035b64","stateId":"884527cd-3445-450f-98a8-402dd385bcfd","time":0,"duration":0},{"id":"0e7b0190-2749-497a-b8cc-380da2b2e9ee","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90}}},{"id":"8677fb40-e6a7-4c57-91b2-81b67f4b7887","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"4a55d27a-4839-4f0c-a66a-f76b0dac84f4","time":5.96,"duration":0},{"id":"564f0aed-2468-4e34-92f8-88ead482d33b","stateId":"b57c3cd0-00c5-40c5-a906-a94f0837268a","time":6.36,"timingFunction":"@timingFunction","duration":0}]}],"duration":6.36,"fill":"rgba(0,153,0,1)","filters":{},"height":20,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"b57c3cd0-00c5-40c5-a906-a94f0837268a","opacity":0},{"id":"884527cd-3445-450f-98a8-402dd385bcfd","x":"@edgePoint(@transition.direction).x","y":"@edgePoint(@transition.direction).y"}],"time":0.24,"width":189,"x":59,"y":27},{"id":"8b2adf88-62ab-4314-aacf-020fa2d6a301","kind":"rectangle","actions":[],"animations":[{"id":"05df591a-5aa8-4642-9449-95c5f3c8fec1","type":"in","timingFunction":"easeOutExpo","templateId":"slide-in","keyframes":[{"id":"e74f632b-70e0-4d0f-9167-b4759a7152ef","stateId":"1ade9123-07a1-4c73-a1fb-2a53380e33d3","time":0,"duration":0},{"id":"df42693d-9ccb-42cd-a047-07c6d68339a6","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90}}},{"id":"e6d11544-1f65-48f9-b143-04f55f66b6c9","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"4ebd8bd3-b6c3-44ae-8f56-660400ec7628","time":5.96,"duration":0},{"id":"a15cbd69-7580-4ff7-8ab5-6a42302cf770","stateId":"2e11cde3-00ca-4745-814a-1a51c22179cc","time":6.36,"timingFunction":"@timingFunction","duration":0}]}],"duration":6.36,"fill":"rgba(35,35,35,1)","filters":{},"height":27,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"2e11cde3-00ca-4745-814a-1a51c22179cc","opacity":0},{"id":"1ade9123-07a1-4c73-a1fb-2a53380e33d3","x":"@edgePoint(@transition.direction).x","y":"@edgePoint(@transition.direction).y"}],"time":0.24,"width":189,"x":59,"y":10},{"id":"95d3ab15-f7c2-4c81-845f-e739877f79da","kind":"widget","actions":[],"animations":[{"id":"601ce5db-fbcf-4d61-92b5-fb9e27a9b237","type":"in","timingFunction":"easeOutExpo","templateId":"ascend-in","keyframes":[{"id":"db635541-7b55-444e-a7d9-7c6af9920dce","stateId":"4f48f3e6-3136-4ef4-a9e9-b938bbbe64e4","time":0,"duration":0},{"id":"0d9f4737-6762-4ce9-b7ab-574205ae8355","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90},"distance":{"name":"Distance","value":200}}}],"duration":5.81,"filters":{},"height":102,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"4f48f3e6-3136-4ef4-a9e9-b938bbbe64e4","opacity":0,"x":"sin(@transition.direction * (pi / 180)) * @transition.distance","y":"-cos(@transition.direction * (pi / 180)) * @transition.distance"}],"time":1.09,"width":76,"x":207,"y":-3,"html":"<img id=\"image\">","css":"body {\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.distort {\n    width: 100%;\n    height: 100%;\n}\n\n.contain {\n    max-width: 100%;\n    max-height: 100%;\n}\n.cover {\n    width: unset;\n    height: unset;\n}","js":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nlet image = document.getElementById('image');\r\nlet timeout;\r\nlet promiseResolver;\r\nlet feedIterationIndex;\r\nlet feed, feedUrl;\r\nWidget.isLoadedPromise = new Promise((resolve, reject) => {\r\n    promiseResolver = resolve;\r\n});\r\nWidget.on(WidgetEvent.PropertyChanged, () => __awaiter(this, void 0, void 0, function* () {\r\n    yield onChange();\r\n}));\r\nWidget.on(WidgetEvent.AnimationEnd, () => {\r\n    if (!Widget.properties.staticIndex) {\r\n        if (feed && feed[feedIterationIndex + 1] && feed[feedIterationIndex + 1][Widget.properties.feedField]) {\r\n            feedIterationIndex++;\r\n        }\r\n        else {\r\n            feedIterationIndex = 0;\r\n        }\r\n        if (Widget.properties.useFeed && feed && feed[feedIterationIndex][Widget.properties.feedField]) {\r\n            feedUrl = feed[feedIterationIndex][Widget.properties.feedField].value;\r\n        }\r\n        setImageUrl();\r\n    }\r\n});\r\nWidget.on(WidgetEvent.Resize, () => {\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n    timeout = setTimeout(function () {\r\n        onChange();\r\n    }, 0);\r\n});\r\nfunction addImageProcess(src) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.src = src;\r\n        });\r\n    });\r\n}\r\nfunction onChange() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        feedIterationIndex = Widget.properties.feedIndex - 1;\r\n        try {\r\n            if (Widget.properties.dynamicContent.id) {\r\n                feed = yield Widget.properties.dynamicContent.load();\r\n                if (feed && feed.data) {\r\n                    feed = feed.data;\r\n                }\r\n            }\r\n        }\r\n        catch (e) { }\r\n        ;\r\n        if (feed && feed[feedIterationIndex] && feed[feedIterationIndex][Widget.properties.feedField]) {\r\n            feedUrl = feed[feedIterationIndex][Widget.properties.feedField].value;\r\n        }\r\n        yield setImageUrl();\r\n        promiseResolver();\r\n    });\r\n}\r\nfunction setImageUrl() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (Widget.properties.imageUrl || Widget.properties.backImage || feedUrl) {\r\n            let imageUrl = Widget.properties.imageUrl || Widget.properties.backImage;\r\n            if (Widget.properties.useFeed) {\r\n                imageUrl = feedUrl;\r\n            }\r\n            if (imageUrl && /\\S/.test(imageUrl)) {\r\n                let quality = Widget.properties.ImgQuality >= 100 ? 100 : Widget.properties.ImgQuality;\r\n                let fitOption = Widget.properties.backgroundSize.toLowerCase();\r\n                let url = Widget.getOptimizedImageUrl(imageUrl, { width: Widget.width, height: Widget.height, fitOption: fitOption, quality: quality });\r\n                let img = yield addImageProcess(url);\r\n                if (fitOption === 'cover') {\r\n                    if ((Widget.width / Widget.height) > (img.width / img.height)) {\r\n                        image.style.width = Widget.width;\r\n                        image.style.height = 'unset';\r\n                    }\r\n                    else {\r\n                        image.style.height = Widget.height;\r\n                        image.style.width = 'unset';\r\n                    }\r\n                }\r\n                else {\r\n                    image.style.height = '';\r\n                    image.style.width = '';\r\n                }\r\n                image.className = fitOption;\r\n                image.src = url;\r\n                image.style.display = 'unset';\r\n            }\r\n            else {\r\n                image.src = 'none';\r\n                image.style.display = 'none';\r\n            }\r\n        }\r\n        else {\r\n            image.src = 'none';\r\n            image.style.display = 'none';\r\n        }\r\n    });\r\n}\r\n","customProperties":[{"name":"backImage","unit":"image","value":{"id":"undefined","src":"undefined"}},{"name":"backgroundSize","unit":"select","value":[{"value":"Contain","selected":true},{"value":"Cover","selected":false},{"value":"Distort","selected":false}]},{"name":"imageUrl","unit":"text","value":{"text":"https://c.bannerflow.net/accounts/betway/581701278d987c10bca61aed/images/0dbda030-3445-40c2-ac75-54dd71db9f64.png"},"versionPropertyId":"5d676195-d043-440d-9742-bceb33681571"},{"name":"ImgQuality","unit":"number","value":90},{"name":"useFeed","unit":"boolean","value":false},{"name":"dynamicContent","unit":"feed","value":{"id":"","path":"","step":{"occurrence":"loop","size":1,"start":1},"fallback":"","type":"text"}},{"name":"feedField","unit":"text","value":{"text":""},"versionPropertyId":"6a2a36c0-dfdd-4830-9579-8b12d02a7926"},{"name":"feedIndex","unit":"number","value":1},{"name":"staticIndex","unit":"boolean","value":false}],"name":"Image displayer"},{"id":"d660e122-84d3-4c88-9f67-c4c198e5c91a","kind":"widget","actions":[],"animations":[],"duration":3.82,"filters":{},"height":50,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":6.18,"width":320,"x":0,"y":0,"html":"<div class=\"widget-wrapper\" id=\"widget-wrapper\">\n    <canvas id=\"canvas\" crossorigin></canvas> \n</div> \n ","css":"*, \n*::before,\n*::after {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\ncanvas {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.widget-wrapper {\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n","js":"// The widget will not udraw the images in case if the Use In\\Out steps setting is activated;\r\nconst LTR = 'Left-Right';\r\nconst RTL = 'Right-Left';\r\nconst UD = 'Up-Down';\r\nconst BU = 'Bottom-Up';\r\nconst TR1 = 'Transition 1';\r\nconst TR2 = 'Transition 2';\r\nconst TR3 = 'Transition 3';\r\nconst CONTAIN = 'Contain';\r\nconst COVER = 'Cover';\r\nlet banner;\r\nclass transitionsSlider {\r\n    constructor(options) {\r\n        this.frameRate = 60;\r\n        this.startTime = 0;\r\n        this.framesPerSecond = 0;\r\n        this.currentTime = 0;\r\n        this.transitionTime = 0;\r\n        this.transitionTimeThird = 0;\r\n        this.imageShowTime = 0;\r\n        this.totalTime = 0;\r\n        this.currentImage = 0;\r\n        this.container = document.getElementById('widget-wrapper');\r\n        this.canvas = document.getElementById('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.skewSize = 0;\r\n        this.skewSizeAbs = 0;\r\n        this.isPaused = true;\r\n        this.animationType = options.animationType;\r\n        this.transitionDirection = options.transitionDirection;\r\n        this.inOutTime = options.inOutTime * 100;\r\n        this.inOutTimeThird = this.inOutTime / 3;\r\n        // particles settings start\r\n        this.rows = options.particlesPerColumn > 0 ? options.particlesPerColumn : 10;\r\n        this.cols = options.particlesPerRow > 0 ? options.particlesPerRow : 10;\r\n        this.particlesColor = options.particlesColor;\r\n        this.particlesColor2 = options.particlesColor2;\r\n        this.additionalColor1 = options.additionalColor1;\r\n        this.additionalColor2 = options.additionalColor2;\r\n        this.additionalColor3 = options.additionalColor3;\r\n        this.currentColor = this.particlesColor;\r\n        // how many particles will have each of the additional colors\r\n        this.color1Percent = Math.min(100, Math.max(0, options.color1Percent));\r\n        this.color2Percent = Math.min(100, Math.max(0, options.color2Percent));\r\n        this.color3Percent = Math.min(100, Math.max(0, options.color3Percent));\r\n        // particles settings end\r\n        //image options start\r\n        this.imageFit = options.imageFit;\r\n        //image options end\r\n        //set dimensions start\r\n        this.ratio = window.devicePixelRatio;\r\n        this.w = this.container.offsetWidth * this.ratio;\r\n        this.h = this.container.offsetHeight * this.ratio;\r\n        this.canvas.width = this.w;\r\n        this.canvas.height = this.h;\r\n        this.particleWidth = this.w / this.cols;\r\n        this.particleHeight = this.h / this.rows;\r\n        this.skewPercent = options.skewSize / 10;\r\n        this.clipLine = {\r\n            startXPos: 0,\r\n            startYPos: 0,\r\n            endXPos: 0,\r\n            endYPos: 0,\r\n            currentXPos: 0,\r\n            currentYPos: 0,\r\n            clipTopXPoint: 0,\r\n            clipBottomXPoint: 0,\r\n            clipLeftYPoint: 0,\r\n            clipRightYPoint: 0,\r\n            pathX: 0,\r\n            pathY: 0,\r\n        };\r\n        // Defines wether the transition will use In animation in the beginning of it and Out animation in the end of it and fill the canvas with particles between start and end.\r\n        this.useInOutSteps = options.useInOutSteps;\r\n        // defines the using of the additional colors for particles\r\n        this.useAdditionalColors = options.useAdditionalColors;\r\n        // wait until all images are loaded\r\n        Promise.all(this.createImages(options)).then(results => {\r\n            if (results.length && results[0]) {\r\n                results.forEach(img => this.images.push(img));\r\n                this.normalizeImageSize();\r\n            }\r\n            this.setTotalTime(options);\r\n            this.calcSkewSize();\r\n            this.setupResize();\r\n            this.createParticles();\r\n            this.createClipLine();\r\n            this.render();\r\n        });\r\n    }\r\n    // add listener for resize\r\n    setupResize() {\r\n        window.addEventListener('resize', this.resize.bind(this));\r\n    }\r\n    //update dimensions\r\n    resize() {\r\n        this.ratio = window.devicePixelRatio;\r\n        this.w = this.canvas.width = this.container.offsetWidth * this.ratio;\r\n        this.h = this.canvas.height = this.container.offsetHeight * this.ratio;\r\n        this.particleWidth = this.w / this.cols;\r\n        this.particleHeight = this.h / this.rows;\r\n        this.normalizeImageSize();\r\n        this.calcSkewSize();\r\n        this.createClipLine();\r\n        this.createParticles();\r\n    }\r\n    resetAll() {\r\n        this.frameRate = 60;\r\n        this.startTime = 0;\r\n        // resetTime\r\n        this.currentTime = 0;\r\n        // reset current image\r\n        if (this.images.length) {\r\n            this.currentImage = 0;\r\n        }\r\n        // reset color\r\n        this.currentColor = this.particlesColor;\r\n        //reset clipLine\r\n        this.clipLine.currentXPos = this.clipLine.startXPos;\r\n        this.clipLine.currentYPos = this.clipLine.startYPos;\r\n        //reset particles position\r\n        this.particles.forEach((p => {\r\n            p.x = p.startXPosition;\r\n            p.y = p.startYPosition;\r\n            p.fill = this.calcParticleColor(p.fill);\r\n        }));\r\n    }\r\n    animateToTime(currentTimelineTime) {\r\n        if (this.isPaused) {\r\n            this.isPaused = false;\r\n            this.resetAll();\r\n            // this.currentTime = 0;\r\n            const currentTimeFrames = Math.floor(currentTimelineTime * this.frameRate);\r\n            for (let i = 0; i <= currentTimeFrames; i++) {\r\n                this.update();\r\n            }\r\n            this.draw();\r\n            this.isPaused = true;\r\n        }\r\n    }\r\n    isLTR() {\r\n        return this.transitionDirection === LTR;\r\n    }\r\n    isRTL() {\r\n        return this.transitionDirection === RTL;\r\n    }\r\n    isUD() {\r\n        return this.transitionDirection === UD;\r\n    }\r\n    isBU() {\r\n        return this.transitionDirection === BU;\r\n    }\r\n    isHorizontal() {\r\n        return this.isLTR() || this.isRTL();\r\n    }\r\n    isVertical() {\r\n        return this.isUD || this.isBU;\r\n    }\r\n    isTR1() {\r\n        return this.animationType === TR1;\r\n    }\r\n    isTR2() {\r\n        return this.animationType === TR2;\r\n    }\r\n    isTR3() {\r\n        return this.animationType === TR3;\r\n    }\r\n    msPerFrame() {\r\n        return 1000 / this.frameRate;\r\n    }\r\n    // transition time part per frame\r\n    frameStep() {\r\n        if (this.useInOutSteps) {\r\n            return this.inOutTime / this.msPerFrame();\r\n        }\r\n        else {\r\n            return this.transitionTime / this.msPerFrame();\r\n        }\r\n    }\r\n    // short transition part per frame\r\n    frameShortStep() {\r\n        if (this.useInOutSteps) {\r\n            return this.inOutTimeThird / this.msPerFrame();\r\n        }\r\n        else {\r\n            return this.transitionTimeThird / this.msPerFrame();\r\n        }\r\n    }\r\n    calcSkewSize() {\r\n        if (this.isHorizontal()) {\r\n            this.skewSize = this.particleWidth * this.skewPercent;\r\n        }\r\n        else if (this.isVertical()) {\r\n            this.skewSize = this.particleHeight * this.skewPercent;\r\n        }\r\n        this.skewSizeAbs = Math.abs(this.skewSize);\r\n    }\r\n    // not used yet\r\n    getCurrentWidgetTime() {\r\n        if (Timeline.currentTime >= Widget.time && Timeline.currentTime <= Widget.time + Widget.duration) {\r\n            return (Timeline.currentTime - Widget.time) * 1000;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    updateCurrentTime() {\r\n        this.changeCurrentImageOnLoop();\r\n        if (Timeline.isPlaying && this.useInOutSteps) {\r\n            if (Timeline.currentTime >= Widget.time && Timeline.currentTime <= Widget.time + Widget.duration) {\r\n                this.currentTime = (Timeline.currentTime - Widget.time) * 1000;\r\n            }\r\n            else {\r\n                this.currentTime = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (this.currentTime > this.totalTime) {\r\n                if (this.isTR2() && !this.useInOutSteps) {\r\n                    this.updateCurrentColor();\r\n                }\r\n                this.currentTime = 0;\r\n            }\r\n            if (!this.isPaused) {\r\n                this.currentTime += this.msPerFrame();\r\n            }\r\n        }\r\n    }\r\n    updateCurrentColor() {\r\n        this.currentColor = this.currentColor === this.particlesColor ? this.particlesColor2 : this.particlesColor;\r\n    }\r\n    setTotalTime(options) {\r\n        this.transitionTime = +options.transitionTime > 0 ? +options.transitionTime * 100 : 1000;\r\n        this.transitionTimeThird = this.transitionTime / 3;\r\n        if (this.images.length && !this.useInOutSteps) {\r\n            this.imageShowTime = (+options.imageShowTime > 0 ? +options.imageShowTime * 1000 : 3000);\r\n        }\r\n        //set the transition time equal to the whole widget time\r\n        if (this.useInOutSteps) {\r\n            this.transitionTime = Widget.duration * 1000;\r\n        }\r\n        // calc total time\r\n        this.totalTime = this.imageShowTime + this.transitionTime;\r\n    }\r\n    changeCurrentImageOnLoop() {\r\n        if (this.images.length && !this.useInOutSteps) {\r\n            if (this.currentTime >= this.totalTime) {\r\n                this.currentImage++;\r\n                this.currentImage = this.currentImage % this.images.length;\r\n            }\r\n        }\r\n    }\r\n    normalizeImageSize() {\r\n        if (this.images.length && !this.useInOutSteps) {\r\n            this.images.forEach(image => {\r\n                if (this.imageFit === COVER) {\r\n                    let xRatio = this.w / image.width;\r\n                    let yRatio = this.h / image.height;\r\n                    let ratio = Math.max(xRatio, yRatio);\r\n                    image.width *= ratio;\r\n                    image.height *= ratio;\r\n                }\r\n                else if (this.imageFit === CONTAIN) {\r\n                    let xRatio = this.w / image.width;\r\n                    let yRatio = this.h / image.height;\r\n                    let ratio = Math.min(xRatio, yRatio);\r\n                    image.width *= ratio;\r\n                    image.height *= ratio;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    createImages(options) {\r\n        const promiseArray = [];\r\n        const imgUrls = [];\r\n        this.images = [];\r\n        if (options.img1) {\r\n            imgUrls.push(options.img1);\r\n        }\r\n        if (options.img2) {\r\n            imgUrls.push(options.img2);\r\n        }\r\n        if (options.img3) {\r\n            imgUrls.push(options.img3);\r\n        }\r\n        if (options.img4) {\r\n            imgUrls.push(options.img4);\r\n        }\r\n        if (imgUrls.length && !this.useInOutSteps) {\r\n            imgUrls.forEach((url) => {\r\n                promiseArray.push(new Promise((res, rej) => {\r\n                    const img = document.createElement('img');\r\n                    img.crossOrigin = 'Anonymous';\r\n                    img.onload = () => {\r\n                        document.body.appendChild(img);\r\n                        res({\r\n                            img,\r\n                            width: img.width,\r\n                            height: img.height,\r\n                            opacity: 0\r\n                        });\r\n                        img.remove();\r\n                    };\r\n                    img.src = Widget.getOptimizedImageUrl(url, {\r\n                        width: this.w,\r\n                        height: this.h,\r\n                        fitOption: this.imageFit.toLowerCase()\r\n                    });\r\n                }));\r\n            });\r\n            return promiseArray;\r\n        }\r\n        else {\r\n            return [Promise.resolve()];\r\n        }\r\n    }\r\n    drawSingleImage(image) {\r\n        let width = image.width * this.ratio;\r\n        let height = image.height * this.ratio;\r\n        let centerX = this.w / 2 - width / 2;\r\n        let centerY = this.h / 2 - height / 2;\r\n        this.ctx.drawImage(image.img, centerX, centerY, width, height);\r\n    }\r\n    drawImages() {\r\n        if (this.images.length && !this.useInOutSteps) {\r\n            let current = this.images[this.currentImage];\r\n            let next = this.images[(this.currentImage + 1) % this.images.length];\r\n            if (this.isTR1()) {\r\n                [next, current].forEach(image => {\r\n                    this.ctx.save();\r\n                    this.ctx.globalAlpha = image.opacity;\r\n                    this.drawSingleImage(image);\r\n                    this.ctx.restore();\r\n                });\r\n            }\r\n            else if (this.isTR2()) {\r\n                this.ctx.fillStyle = 'transparent';\r\n                // draw firstImage start\r\n                this.ctx.save();\r\n                if (this.isHorizontal()) {\r\n                    this.drawLeftClip();\r\n                }\r\n                else if (this.isVertical()) {\r\n                    this.drawBottomClip();\r\n                }\r\n                if (this.isLTR() || this.isBU()) {\r\n                    this.drawSingleImage(next);\r\n                }\r\n                else if (this.isRTL() || this.isUD()) {\r\n                    this.drawSingleImage(current);\r\n                }\r\n                this.ctx.restore();\r\n                // draw firstImage end\r\n                // draw second image start\r\n                this.ctx.save();\r\n                if (this.isHorizontal()) {\r\n                    this.drawRightClip();\r\n                }\r\n                else if (this.isVertical()) {\r\n                    this.drawTopClip();\r\n                }\r\n                if (this.isLTR() || this.isBU()) {\r\n                    this.drawSingleImage(current);\r\n                }\r\n                else if (this.isRTL() || this.isUD()) {\r\n                    this.drawSingleImage(next);\r\n                }\r\n                this.ctx.restore();\r\n            }\r\n            else if (this.isTR3()) {\r\n                [current, next].forEach(image => {\r\n                    if (image.opacity) {\r\n                        this.drawSingleImage(image);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    updateImages() {\r\n        if (this.images.length && !this.useInOutSteps) {\r\n            let current = this.images[this.currentImage];\r\n            let next = this.images[(this.currentImage + 1) % this.images.length];\r\n            if (this.isTR1()) {\r\n                let startChangeOpacityPoint = this.totalTime - this.transitionTime + this.transitionTimeThird;\r\n                if (this.currentTime >= startChangeOpacityPoint) {\r\n                    let timeForChangeOpacity = this.transitionTime - this.transitionTimeThird;\r\n                    const changeOpacityStep = 1 / (timeForChangeOpacity / this.msPerFrame());\r\n                    if (current.opacity > 0) {\r\n                        // hide current images\r\n                        current.opacity -= changeOpacityStep;\r\n                        current.opacity = current.opacity < 0 ? 0 : current.opacity;\r\n                        // show next image\r\n                        if (next.opacity < 1) {\r\n                            next.opacity += changeOpacityStep;\r\n                            next.opacity = next.opacity > 1 ? 1 : next.opacity;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    current.opacity = 1;\r\n                }\r\n            }\r\n            else if (this.isTR3()) {\r\n                let changePoint = this.totalTime - this.transitionTimeThird;\r\n                if (this.currentTime >= changePoint) {\r\n                    current.opacity = 0;\r\n                    next.opacity = 1;\r\n                }\r\n                else {\r\n                    current.opacity = 1;\r\n                    next.opacity = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createParticles() {\r\n        this.particles = [];\r\n        if (this.isTR1() || this.isTR3()) {\r\n            let draw = false;\r\n            let additionalColumns = 0;\r\n            let additionalRows = 0;\r\n            if (this.isHorizontal()) {\r\n                additionalColumns = Math.ceil((this.skewSizeAbs * this.rows) / this.particleWidth) * 2;\r\n            }\r\n            else if (this.isVertical()) {\r\n                additionalRows = Math.ceil((this.skewSizeAbs * this.cols) / this.particleHeight) * 2;\r\n            }\r\n            let totalRows = this.rows + additionalRows;\r\n            let totalColumns = this.cols + additionalColumns;\r\n            let offsetXStep = this.particleWidth * 1.5;\r\n            let offsetYStep = this.particleHeight * 1.5;\r\n            for (let row = 0; row < totalRows; row++) {\r\n                for (let column = 0; column < totalColumns; column++) {\r\n                    let additionalColumnsOffset = this.particleWidth * (additionalColumns / 2);\r\n                    let additionalRowsOffset = this.particleHeight * (additionalRows / 2);\r\n                    let skewXOffset = this.skewSize * (totalRows - row - 1);\r\n                    let skewYOffset = this.skewSize * (totalColumns - column - 1);\r\n                    let liveTimeShowOffset = Math.random() * (this.transitionTimeThird * 2);\r\n                    let liveTimeHideOffset = Math.random() * this.transitionTimeThird;\r\n                    if (this.useInOutSteps) {\r\n                        liveTimeShowOffset = liveTimeHideOffset = Math.floor(Math.random() * this.inOutTime);\r\n                    }\r\n                    let x = this.particleWidth * column;\r\n                    let y = this.particleHeight * row;\r\n                    if (this.isHorizontal()) {\r\n                        x = x - additionalColumnsOffset + skewXOffset;\r\n                    }\r\n                    else if (this.isVertical()) {\r\n                        y = y - additionalRowsOffset + skewYOffset;\r\n                    }\r\n                    let endXPosition = x;\r\n                    let endYPosition = y;\r\n                    let particleRowOffset = offsetXStep * (totalRows - row - 1);\r\n                    let particleColumnOffset = offsetYStep * (totalColumns - column - 1);\r\n                    let pathX = this.w + additionalColumnsOffset + particleRowOffset;\r\n                    let pathY = this.h + additionalRowsOffset + particleColumnOffset;\r\n                    let colOffset;\r\n                    let rowOffset;\r\n                    let xStep;\r\n                    let yStep;\r\n                    // add field for transition 3 particles\r\n                    if (this.isTR3()) {\r\n                        draw = true;\r\n                        // move particles to start position outside of the screen;\r\n                        if (this.isLTR()) {\r\n                            colOffset = offsetXStep * (totalColumns - column - 1);\r\n                            pathX += colOffset;\r\n                            if (this.skewSize > 0) {\r\n                                pathX += this.skewSizeAbs + this.skewSize * (totalRows - row - 1);\r\n                            }\r\n                            x -= pathX;\r\n                        }\r\n                        else if (this.isRTL()) {\r\n                            colOffset = offsetXStep * column;\r\n                            pathX += colOffset;\r\n                            if (this.skewSize < 0) {\r\n                                pathX += this.skewSizeAbs;\r\n                            }\r\n                            x += pathX;\r\n                        }\r\n                        else if (this.isUD()) {\r\n                            rowOffset = offsetYStep * (totalRows - row - 1);\r\n                            pathY += rowOffset;\r\n                            if (this.skewSize > 0) {\r\n                                pathY += this.skewSizeAbs + this.skewSize * (totalColumns - column - 1);\r\n                            }\r\n                            y -= pathY;\r\n                        }\r\n                        else if (this.isBU()) {\r\n                            rowOffset = offsetYStep * row;\r\n                            pathY += rowOffset;\r\n                            if (this.skewSize < 0) {\r\n                                pathY += this.skewSizeAbs;\r\n                            }\r\n                            y += pathY;\r\n                        }\r\n                        xStep = pathX / this.frameShortStep();\r\n                        yStep = pathY / this.frameShortStep();\r\n                        if (this.useInOutSteps) {\r\n                            xStep = pathX / this.frameStep();\r\n                            yStep = pathY / this.frameStep();\r\n                        }\r\n                    }\r\n                    this.particles.push({\r\n                        startXPosition: x,\r\n                        startYPosition: y,\r\n                        endXPosition,\r\n                        endYPosition,\r\n                        x: x,\r\n                        y: y,\r\n                        pathX,\r\n                        pathY,\r\n                        xStep,\r\n                        yStep,\r\n                        xBackStep: 0,\r\n                        yBackStep: 0,\r\n                        liveTimeShowOffset,\r\n                        liveTimeHideOffset,\r\n                        fill: this.currentColor,\r\n                        draw,\r\n                    });\r\n                }\r\n            }\r\n            //add back speed for each particle\r\n            this.particles.forEach((p, i) => {\r\n                p.xBackStep = this.particles[this.particles.length - 1 - i].xStep * 1.1;\r\n                p.yBackStep = this.particles[this.particles.length - 1 - i].yStep * 1.1;\r\n            });\r\n        }\r\n        else if (this.isTR2()) {\r\n            let particlesPerLine = 1;\r\n            let linesCount = this.isHorizontal() ? this.rows : this.cols;\r\n            let x;\r\n            let y;\r\n            let speed;\r\n            for (let row = 0; row < linesCount; row++) {\r\n                for (let particle = 0; particle < particlesPerLine; particle++) {\r\n                    y = this.particleHeight * row;\r\n                    if (this.isLTR()) {\r\n                        x = 0 - this.particleWidth - this.skewSizeAbs;\r\n                    }\r\n                    else if (this.isRTL()) {\r\n                        x = this.w + this.skewSizeAbs;\r\n                    }\r\n                    if (this.isHorizontal()) {\r\n                        speed = (Math.random() * (this.w * 0.07) + this.w * 0.07);\r\n                    }\r\n                    else if (this.isVertical()) {\r\n                        speed = (Math.random() * (this.h * 0.07) + this.h * 0.07);\r\n                        x = this.particleWidth * row;\r\n                        if (this.isUD()) {\r\n                            y = 0 - this.particleHeight - this.skewSizeAbs;\r\n                        }\r\n                        else if (this.isBU()) {\r\n                            y = this.h + this.skewSizeAbs;\r\n                        }\r\n                    }\r\n                    this.particles.push({\r\n                        startXPosition: x,\r\n                        startYPosition: y,\r\n                        x,\r\n                        y,\r\n                        fill: this.currentColor,\r\n                        speed,\r\n                        draw: true\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // shuffle the colors\r\n        if (this.useAdditionalColors) {\r\n            this.shuffleParticles();\r\n        }\r\n    }\r\n    shuffleParticles() {\r\n        let particlesPercent = this.particles.length / 100;\r\n        let part1 = Math.round(particlesPercent * this.color1Percent);\r\n        let part2 = Math.round(particlesPercent * this.color2Percent);\r\n        let part3 = Math.round(particlesPercent * this.color3Percent);\r\n        let newDataArray = [];\r\n        this.particles.forEach((p, i) => {\r\n            if (part1 && (i + 1 <= part1)) {\r\n                p.fill = this.additionalColor1;\r\n            }\r\n            else if (part2 && (i + 1 <= part1 + part2)) {\r\n                p.fill = this.additionalColor2;\r\n            }\r\n            else if (part3 && (i + 1 <= part1 + part2 + part3)) {\r\n                p.fill = this.additionalColor3;\r\n            }\r\n            else {\r\n                p.fill = this.currentColor;\r\n            }\r\n            if (this.isTR1() || this.isTR3()) {\r\n                newDataArray.push({\r\n                    startXPosition: p.startXPosition,\r\n                    startYPosition: p.startYPosition,\r\n                    endXPosition: p.endXPosition,\r\n                    endYPosition: p.endYPosition,\r\n                    x: p.x,\r\n                    y: p.y,\r\n                    pathX: p.pathX,\r\n                    pathY: p.pathY,\r\n                    xStep: p.xStep,\r\n                    yStep: p.yStep,\r\n                    xBackStep: p.xBackStep,\r\n                    yBackStep: p.yBackStep\r\n                });\r\n            }\r\n            else if (this.isTR2()) {\r\n                newDataArray.push({\r\n                    startXPosition: p.x,\r\n                    startYPosition: p.y,\r\n                    x: p.x,\r\n                    y: p.y,\r\n                    speed: p.speed\r\n                });\r\n            }\r\n        });\r\n        newDataArray = newDataArray.sort(() => Math.random() - 0.5);\r\n        newDataArray.forEach((data, i) => {\r\n            this.particles[i] = Object.assign(Object.assign({}, this.particles[i]), data);\r\n        });\r\n    }\r\n    calcParticleColor(fill) {\r\n        return (fill === this.particlesColor || fill === this.particlesColor2) ? this.currentColor : fill;\r\n    }\r\n    drawHorizontalParticle(x, y) {\r\n        let fix = 1;\r\n        if (this.isTR2()) {\r\n            fix = 0.5;\r\n        }\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x + this.skewSize, y);\r\n        // +1 to fix spaces between particles\r\n        this.ctx.lineTo(x + this.particleWidth + this.skewSize + fix, y);\r\n        this.ctx.lineTo(x + this.particleWidth + fix, y + this.particleHeight + fix);\r\n        this.ctx.lineTo(x, y + this.particleHeight + fix);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n    drawVerticalParticle(x, y) {\r\n        let fix = 1;\r\n        if (this.isTR2()) {\r\n            fix = 0.5;\r\n        }\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y + this.skewSize);\r\n        // +1 to fix spaces between particles\r\n        this.ctx.lineTo(x + this.particleWidth + fix, y);\r\n        this.ctx.lineTo(x + this.particleWidth + fix, y + this.particleHeight + fix);\r\n        this.ctx.lineTo(x, y + this.particleHeight + this.skewSize + fix);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n    drawParticles() {\r\n        this.particles.forEach(({ x, y, fill, draw }, i) => {\r\n            if (draw) {\r\n                this.ctx.save();\r\n                this.ctx.fillStyle = fill;\r\n                if (this.isHorizontal()) {\r\n                    this.drawHorizontalParticle(x, y);\r\n                }\r\n                else if (this.isVertical()) {\r\n                    this.drawVerticalParticle(x, y);\r\n                }\r\n                this.ctx.restore();\r\n            }\r\n        });\r\n    }\r\n    tr2MoveParticle(p) {\r\n        let accelerationX = 0;\r\n        let accelerationY = 0;\r\n        if (this.isLTR()) {\r\n            accelerationX = Math.abs(p.x / this.w * 10) + 0.1;\r\n        }\r\n        else if (this.isRTL()) {\r\n            accelerationX = Math.abs(Math.abs(p.x / this.w - 1) * 10) + 0.1;\r\n        }\r\n        else if (this.isUD()) {\r\n            accelerationY = Math.abs(p.y / this.h * 10) + 0.1;\r\n        }\r\n        else if (this.isBU()) {\r\n            accelerationY = Math.abs(Math.abs(p.y / this.h - 1) * 10) + 0.1;\r\n        }\r\n        let xStep = p.speed + accelerationX;\r\n        let yStep = p.speed + accelerationY;\r\n        let isOverEdge;\r\n        // set values according to direction of the animation\r\n        if (this.isLTR()) {\r\n            yStep = 0;\r\n            isOverEdge = p.x > this.w + this.skewSizeAbs;\r\n        }\r\n        else if (this.isRTL()) {\r\n            xStep *= -1;\r\n            yStep = 0;\r\n            isOverEdge = p.x < (this.particleWidth + this.skewSizeAbs) * -1;\r\n        }\r\n        else if (this.isUD()) {\r\n            xStep = 0;\r\n            isOverEdge = p.y > this.h + this.skewSizeAbs;\r\n        }\r\n        else if (this.isBU()) {\r\n            xStep = 0;\r\n            yStep *= -1;\r\n            isOverEdge = p.y < (this.particleHeight + this.skewSizeAbs) * -1;\r\n        }\r\n        p.x += xStep;\r\n        p.y += yStep;\r\n        // when the particle is over edge of the screen;\r\n        if (isOverEdge) {\r\n            if (!this.useInOutSteps) {\r\n                if (this.isHorizontal()) {\r\n                    p.x = this.clipLine.currentXPos;\r\n                }\r\n                else if (this.isVertical()) {\r\n                    p.y = this.clipLine.currentYPos;\r\n                }\r\n                if (this.isLTR()) {\r\n                    p.x += this.skewSizeAbs;\r\n                }\r\n                else if (this.isRTL()) {\r\n                    p.x -= this.particleWidth;\r\n                }\r\n                else if (this.isUD()) {\r\n                    p.y += this.skewSizeAbs;\r\n                }\r\n                else if (this.isBU()) {\r\n                    p.y -= this.particleHeight;\r\n                }\r\n            }\r\n            else {\r\n                if (this.currentTime >= this.totalTime - this.inOutTime) {\r\n                    let timeLeft = (this.totalTime - this.currentTime) / 1000;\r\n                    let framesLeft = Math.floor(this.frameRate * timeLeft);\r\n                    let pathXPerFramesLeft = Math.abs(xStep * framesLeft);\r\n                    let pathYPerFramesLeft = Math.abs(yStep * framesLeft);\r\n                    if (pathXPerFramesLeft > this.w + (this.particleWidth + this.skewSizeAbs) * 2) {\r\n                        p.x = p.startXPosition;\r\n                    }\r\n                    if (pathYPerFramesLeft > this.h + (this.particleHeight + this.skewSizeAbs) * 2) {\r\n                        p.y = p.startYPosition;\r\n                    }\r\n                }\r\n                else {\r\n                    p.x = p.startXPosition;\r\n                    p.y = p.startYPosition;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateParticles() {\r\n        if (this.isTR1()) {\r\n            let startIn = this.totalTime - this.transitionTime;\r\n            let startOut = this.totalTime - this.transitionTimeThird;\r\n            if (this.useInOutSteps) {\r\n                startOut = this.totalTime - this.inOutTime;\r\n            }\r\n            this.particles.forEach((p, i) => {\r\n                p.draw = false;\r\n                if (this.currentTime > startIn + p.liveTimeShowOffset) {\r\n                    p.draw = true;\r\n                    if (this.currentTime >= startOut + p.liveTimeHideOffset) {\r\n                        p.draw = false;\r\n                    }\r\n                }\r\n                if (this.currentTime >= this.totalTime) {\r\n                    p.draw = false;\r\n                }\r\n            });\r\n        }\r\n        else if (this.isTR2()) {\r\n            let startIn = this.totalTime - this.transitionTime;\r\n            let endIn = this.totalTime;\r\n            let startOut = this.totalTime - this.inOutTime;\r\n            let endOut = this.totalTime;\r\n            if (this.useInOutSteps) {\r\n                startIn = 0;\r\n                endIn = this.inOutTime;\r\n            }\r\n            this.particles.forEach((p, i) => {\r\n                // default move\r\n                if (!this.useInOutSteps) {\r\n                    if (this.currentTime > startIn) {\r\n                        p.fill = this.calcParticleColor(p.fill);\r\n                        this.tr2MoveParticle(p);\r\n                    }\r\n                    // In\\Out move\r\n                }\r\n                else {\r\n                    if (this.currentTime > startIn && this.currentTime <= endIn) {\r\n                        this.currentColor = this.particlesColor;\r\n                        p.fill = this.calcParticleColor(p.fill);\r\n                        this.tr2MoveParticle(p);\r\n                    }\r\n                    else if (this.currentTime >= startOut && this.currentTime <= endOut) {\r\n                        this.currentColor = this.particlesColor2;\r\n                        p.fill = this.calcParticleColor(p.fill);\r\n                        this.tr2MoveParticle(p);\r\n                    }\r\n                    else {\r\n                        p.x = p.startXPosition;\r\n                        p.y = p.startYPosition;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else if (this.isTR3()) {\r\n            let startIn = this.totalTime - this.transitionTime;\r\n            let endIn = startIn + this.transitionTimeThird;\r\n            let startOut = this.totalTime - this.transitionTimeThird;\r\n            let endOut = this.totalTime;\r\n            if (this.useInOutSteps) {\r\n                startIn = 0;\r\n                endIn = this.inOutTime;\r\n                startOut = this.totalTime - this.inOutTime;\r\n            }\r\n            this.particles.forEach((p, i) => {\r\n                if (this.currentTime > startIn) {\r\n                    if (this.currentTime <= endIn) {\r\n                        if (this.isLTR()) {\r\n                            p.x += p.xStep;\r\n                        }\r\n                        else if (this.isRTL()) {\r\n                            p.x -= p.xStep;\r\n                        }\r\n                        else if (this.isUD()) {\r\n                            p.y += p.yStep;\r\n                        }\r\n                        else if (this.isBU()) {\r\n                            p.y -= p.yStep;\r\n                        }\r\n                    }\r\n                    else if (this.currentTime >= startOut) {\r\n                        if (this.isLTR()) {\r\n                            p.x += p.xBackStep;\r\n                        }\r\n                        else if (this.isRTL()) {\r\n                            p.x -= p.xBackStep;\r\n                        }\r\n                        else if (this.isUD()) {\r\n                            p.y += p.yBackStep;\r\n                        }\r\n                        else if (this.isBU()) {\r\n                            p.y -= p.yBackStep;\r\n                        }\r\n                        if (this.currentTime >= endOut) {\r\n                            p.x = p.startXPosition;\r\n                            p.y = p.startYPosition;\r\n                        }\r\n                    }\r\n                    else {\r\n                        p.x = p.endXPosition;\r\n                        p.y = p.endYPosition;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    drawTopClip() {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, 0);\r\n        this.ctx.lineTo(this.w, 0);\r\n        this.ctx.lineTo(this.w, this.clipLine.clipRightYPoint);\r\n        this.ctx.lineTo(0, this.clipLine.clipLeftYPoint);\r\n        this.ctx.clip();\r\n    }\r\n    drawRightClip() {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.clipLine.clipTopXPoint, 0);\r\n        this.ctx.lineTo(this.w, 0);\r\n        this.ctx.lineTo(this.w, this.h);\r\n        this.ctx.lineTo(this.clipLine.clipBottomXPoint, this.h);\r\n        this.ctx.clip();\r\n    }\r\n    drawBottomClip() {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, this.clipLine.clipLeftYPoint);\r\n        this.ctx.lineTo(this.w, this.clipLine.clipRightYPoint);\r\n        this.ctx.lineTo(this.w, this.h);\r\n        this.ctx.lineTo(0, this.h);\r\n        this.ctx.clip();\r\n    }\r\n    drawLeftClip() {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, 0);\r\n        this.ctx.lineTo(this.clipLine.clipTopXPoint, 0);\r\n        this.ctx.lineTo(this.clipLine.clipBottomXPoint, this.h);\r\n        this.ctx.lineTo(0, this.h);\r\n        this.ctx.clip();\r\n    }\r\n    createClipLine() {\r\n        if (this.isTR2()) {\r\n            let fromLeft = 0 - (this.skewSizeAbs * this.rows + this.particleWidth + this.skewSizeAbs);\r\n            let fromRight = this.w + (this.particleWidth + this.skewSizeAbs * this.rows);\r\n            let fromTop = 0 - (this.skewSizeAbs * this.cols + this.particleHeight + this.skewSizeAbs);\r\n            let fromBottom = this.h + (this.particleHeight + this.skewSizeAbs * this.cols);\r\n            if (this.isLTR()) {\r\n                this.clipLine.startXPos = fromLeft;\r\n                this.clipLine.endXPos = fromRight;\r\n            }\r\n            else if (this.isRTL()) {\r\n                this.clipLine.startXPos = fromRight;\r\n                this.clipLine.endXPos = fromLeft;\r\n            }\r\n            else if (this.isBU()) {\r\n                this.clipLine.startYPos = fromBottom;\r\n                this.clipLine.endYPos = fromTop;\r\n            }\r\n            else if (this.isUD()) {\r\n                this.clipLine.startYPos = fromTop;\r\n                this.clipLine.endYPos = fromBottom;\r\n            }\r\n            this.clipLine.pathX = Math.abs(this.clipLine.startXPos - this.clipLine.endXPos);\r\n            this.clipLine.pathY = Math.abs(this.clipLine.startYPos - this.clipLine.endYPos);\r\n            this.clipLine.currentXPos = this.clipLine.startXPos;\r\n            this.clipLine.currentYPos = this.clipLine.startYPos;\r\n        }\r\n    }\r\n    moveClipLine() {\r\n        let clipXStep = this.clipLine.pathX / this.frameShortStep();\r\n        let clipYStep = this.clipLine.pathY / this.frameShortStep();\r\n        if (this.isLTR()) {\r\n            if (this.clipLine.currentXPos <= this.clipLine.endXPos - clipXStep) {\r\n                this.clipLine.currentXPos += clipXStep;\r\n            }\r\n            else {\r\n                this.clipLine.currentXPos += this.clipLine.endXPos - this.clipLine.currentXPos;\r\n            }\r\n        }\r\n        else if (this.isRTL()) {\r\n            if (this.clipLine.currentXPos >= this.clipLine.endXPos - clipXStep) {\r\n                this.clipLine.currentXPos -= clipXStep;\r\n            }\r\n            else {\r\n                this.clipLine.currentXPos -= this.clipLine.currentXPos - this.clipLine.endXPos;\r\n            }\r\n        }\r\n        else if (this.isUD()) {\r\n            if (this.clipLine.currentYPos <= this.clipLine.endYPos - clipYStep) {\r\n                this.clipLine.currentYPos += clipYStep;\r\n            }\r\n            else {\r\n                this.clipLine.currentYPos += this.clipLine.endYPos - this.clipLine.currentYPos;\r\n            }\r\n        }\r\n        else if (this.isBU()) {\r\n            if (this.clipLine.currentYPos >= this.clipLine.endYPos - clipYStep) {\r\n                this.clipLine.currentYPos -= clipYStep;\r\n            }\r\n            else {\r\n                this.clipLine.currentYPos -= this.clipLine.currentYPos - this.clipLine.endYPos;\r\n            }\r\n        }\r\n    }\r\n    updateClipLine() {\r\n        if (this.isTR2()) {\r\n            if (this.skewSize < 0) {\r\n                // horizontal move\r\n                this.clipLine.clipTopXPoint = this.clipLine.currentXPos;\r\n                this.clipLine.clipBottomXPoint = this.clipLine.currentXPos + this.skewSizeAbs * this.rows;\r\n                //vertical move\r\n                this.clipLine.clipLeftYPoint = this.clipLine.currentYPos;\r\n                this.clipLine.clipRightYPoint = this.clipLine.currentYPos + this.skewSizeAbs * this.cols;\r\n            }\r\n            else if (this.skewSize > 0) {\r\n                this.clipLine.clipTopXPoint = this.clipLine.currentXPos + this.skewSizeAbs * this.rows;\r\n                this.clipLine.clipBottomXPoint = this.clipLine.currentXPos;\r\n                this.clipLine.clipLeftYPoint = this.clipLine.currentYPos + this.skewSizeAbs * this.cols;\r\n                this.clipLine.clipRightYPoint = this.clipLine.currentYPos;\r\n            }\r\n            else {\r\n                this.clipLine.clipTopXPoint = this.clipLine.clipBottomXPoint = this.clipLine.currentXPos;\r\n                this.clipLine.clipLeftYPoint = this.clipLine.clipRightYPoint = this.clipLine.currentYPos;\r\n            }\r\n            //default move\r\n            if (!this.useInOutSteps) {\r\n                let startMovePoint = this.totalTime - this.transitionTimeThird;\r\n                if (this.currentTime >= startMovePoint && this.currentTime < this.totalTime) {\r\n                    this.moveClipLine();\r\n                }\r\n                else {\r\n                    this.clipLine.currentXPos = this.clipLine.startXPos;\r\n                    this.clipLine.currentYPos = this.clipLine.startYPos;\r\n                }\r\n            }\r\n            else {\r\n                let startIn = this.inOutTime - this.inOutTimeThird;\r\n                let endIn = this.inOutTime;\r\n                let startOut = this.totalTime - this.inOutTime;\r\n                let endOut = startOut + this.inOutTimeThird;\r\n                if (this.currentTime >= startIn && this.currentTime <= endIn) {\r\n                    this.moveClipLine();\r\n                }\r\n                else if (this.currentTime >= startOut && this.currentTime <= endOut) {\r\n                    this.moveClipLine();\r\n                }\r\n                else {\r\n                    this.clipLine.currentXPos = this.clipLine.startXPos;\r\n                    this.clipLine.currentYPos = this.clipLine.startYPos;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    drawFillRects() {\r\n        if (this.isTR2() && this.useInOutSteps) {\r\n            if (this.currentTime > 0 && this.currentTime < (this.totalTime - this.inOutTime)) {\r\n                this.ctx.save();\r\n                this.ctx.fillStyle = this.particlesColor;\r\n                if (this.isLTR()) {\r\n                    this.drawLeftClip();\r\n                }\r\n                else if (this.isRTL()) {\r\n                    this.drawRightClip();\r\n                }\r\n                else if (this.isUD()) {\r\n                    this.drawTopClip();\r\n                }\r\n                else if (this.isBU()) {\r\n                    this.drawBottomClip();\r\n                }\r\n                this.ctx.fillRect(0, 0, this.w, this.h);\r\n                this.ctx.restore();\r\n            }\r\n            if (this.currentTime >= this.inOutTime && this.currentTime <= this.totalTime - this.inOutTime + this.inOutTimeThird) {\r\n                this.ctx.save();\r\n                this.ctx.fillStyle = this.particlesColor;\r\n                if (this.isLTR()) {\r\n                    this.drawRightClip();\r\n                }\r\n                else if (this.isRTL()) {\r\n                    this.drawLeftClip();\r\n                }\r\n                else if (this.isUD()) {\r\n                    this.drawBottomClip();\r\n                }\r\n                else if (this.isBU()) {\r\n                    this.drawTopClip();\r\n                }\r\n                this.ctx.fillRect(0, 0, this.w, this.h);\r\n                this.ctx.restore();\r\n            }\r\n        }\r\n    }\r\n    draw() {\r\n        this.clear();\r\n        this.drawImages();\r\n        this.drawParticles();\r\n        this.drawFillRects();\r\n    }\r\n    update() {\r\n        this.updateImages();\r\n        this.updateParticles();\r\n        this.updateCurrentTime();\r\n        this.updateClipLine();\r\n    }\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.w, this.h);\r\n    }\r\n    fixFrameRate() {\r\n        // get the proper frameRate count in case if it is more than 60\r\n        if ((new Date().getTime() - this.startTime) <= 100) {\r\n            this.framesPerSecond++;\r\n        }\r\n        else {\r\n            this.startTime = new Date().getTime();\r\n            // if (this.frameRate < this.framesPerSecond) {\r\n            //     this.frameRate = this.framesPerSecond;\r\n            // }\r\n            if (this.frameRate !== this.framesPerSecond) {\r\n                this.frameRate = Math.floor(this.framesPerSecond * 10);\r\n            }\r\n            this.framesPerSecond = 0;\r\n        }\r\n    }\r\n    render() {\r\n        if (!this.isPaused) {\r\n            this.fixFrameRate();\r\n            this.draw();\r\n            this.update();\r\n        }\r\n        this.loop = window.requestAnimationFrame(this.render.bind(this));\r\n    }\r\n    destroy() {\r\n        if (this.loop) {\r\n            window.cancelAnimationFrame(this.loop);\r\n            this.loop = null;\r\n        }\r\n    }\r\n}\r\nWidget.on(WidgetEvent.PropertyChanged, () => {\r\n    applySettings(Widget.properties);\r\n});\r\nWidget.on(WidgetEvent.AnimationStart, () => {\r\n    if (banner) {\r\n        banner.resetAll();\r\n        banner.isPaused = false;\r\n    }\r\n});\r\nWidget.on(WidgetEvent.AnimationEnd, () => {\r\n    if (banner) {\r\n        banner.isPaused = true;\r\n    }\r\n});\r\nWidget.on(WidgetEvent.Resize, () => {\r\n    if (banner) {\r\n        banner.resize();\r\n    }\r\n});\r\nTimeline.on(TimelineEvent.Tick, () => {\r\n    if (banner) {\r\n        banner.setTotalTime(Widget.properties);\r\n    }\r\n});\r\nlet seekTimeout;\r\nTimeline.on(TimelineEvent.Seek, (timeLineCurrentTime) => {\r\n    clearTimeout(seekTimeout);\r\n    if (banner && banner.isPaused) {\r\n        let currentTimelineTime = timeLineCurrentTime;\r\n        let widgetStartPoint = Widget.time;\r\n        let widgetEndPoint = widgetStartPoint + Widget.duration;\r\n        if (currentTimelineTime >= widgetStartPoint && currentTimelineTime <= widgetEndPoint) {\r\n            let currentTime = currentTimelineTime - widgetStartPoint;\r\n            banner.setTotalTime(Widget.properties);\r\n            banner.animateToTime(currentTime);\r\n            if (Creative.environment === 'design-view') {\r\n                seekTimeout = setTimeout(() => console.log(banner), 200);\r\n            }\r\n        }\r\n    }\r\n});\r\nTimeline.on(TimelineEvent.Play, () => {\r\n    if (banner) {\r\n        if (Timeline.currentTime >= Widget.time && Timeline.currentTime <= Widget.time + Widget.duration) {\r\n            banner.currentTime = (Timeline.currentTime - Widget.time) * 1000;\r\n            banner.isPaused = false;\r\n        }\r\n    }\r\n});\r\nTimeline.on(TimelineEvent.Loop, () => {\r\n    if (banner) {\r\n        banner.resetAll();\r\n        banner.isPaused = false;\r\n    }\r\n});\r\nTimeline.on(TimelineEvent.Pause, () => {\r\n    if (banner) {\r\n        banner.isPaused = true;\r\n    }\r\n});\r\nTimeline.on(TimelineEvent.Stop, () => {\r\n    if (banner) {\r\n        banner.isPaused = true;\r\n    }\r\n});\r\nfunction applySettings(props) {\r\n    if (banner) {\r\n        banner.destroy();\r\n    }\r\n    banner = null;\r\n    setTimeout(() => {\r\n        banner = new transitionsSlider(props);\r\n    }, 0);\r\n}\r\n","customProperties":[{"name":"img1","unit":"image","value":{"id":"undefined","src":"undefined"}},{"name":"img2","unit":"image","value":{"id":"undefined","src":"undefined"}},{"name":"img3","unit":"image","value":{"id":"undefined","src":"undefined"}},{"name":"img4","unit":"image","value":{"id":"undefined","src":"undefined"}},{"name":"imageFit","unit":"select","value":[{"value":"Cover","selected":true},{"value":"Contain","selected":false}]},{"name":"animationType","unit":"select","value":[{"value":"Transition 1","selected":false},{"value":"Transition 2","selected":true},{"value":"Transition 3","selected":false}]},{"name":"transitionDirection","unit":"select","value":[{"value":"Right-Left","selected":true},{"value":"Left-Right","selected":false},{"value":"Up-Down","selected":false},{"value":"Bottom-Up","selected":false}]},{"name":"transitionTime","unit":"number","value":10},{"name":"useInOutSteps","unit":"boolean","value":true},{"name":"inOutTime","unit":"number","value":5},{"name":"imageShowTime","unit":"number","value":3},{"name":"particlesPerRow","unit":"number","value":8},{"name":"particlesPerColumn","unit":"number","value":4},{"name":"skewSize","unit":"number","value":-1.1},{"name":"particlesColor","unit":"color","value":"rgba(0,153,0,1)"},{"name":"particlesColor2","unit":"color","value":"rgba(0,153,0,1)"},{"name":"useAdditionalColors","unit":"boolean","value":false},{"name":"additionalColor1","unit":"color","value":"rgba(245,38,38,1)"},{"name":"color1Percent","unit":"number","value":10},{"name":"additionalColor2","unit":"color","value":"rgba(95,190,112,1)"},{"name":"color2Percent","unit":"number","value":10},{"name":"additionalColor3","unit":"color","value":"rgba(243,210,57,1)"},{"name":"color3Percent","unit":"number","value":10}],"name":"Transitions"},{"id":"594ec20a-2586-4516-9760-a93e95af0247","kind":"text","actions":[],"animations":[{"id":"5871f66b-a2f6-471c-a72f-d427ecd55373","type":"in","timingFunction":"linear","templateId":"fade-in","keyframes":[{"id":"aae39274-1233-47a8-b72a-d09c405c08de","stateId":"7b344698-384d-4a47-8c84-4b39b720fbbc","time":0,"duration":0},{"id":"5ae988f1-d1e4-4b86-8d2a-07c1fbf75ad6","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{}},{"id":"f49d2dbe-54bb-4ddc-a4d4-0e52107cba0a","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"729c0245-55e5-4579-b5f9-5b4acd59581e","time":2.59,"duration":0},{"id":"5904da08-af41-48ba-89fe-a1bfa2bfc1d0","stateId":"d641960e-8d5b-40bb-86c8-b734289aadb8","time":2.99,"timingFunction":"@timingFunction","duration":0}],"settings":{}}],"duration":2.99,"filters":{},"height":18,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"7b344698-384d-4a47-8c84-4b39b720fbbc","opacity":0},{"id":"d641960e-8d5b-40bb-86c8-b734289aadb8","opacity":0}],"time":6.61,"width":304,"x":11,"y":3,"characterSpacing":0,"fontSize":10,"horizontalAlignment":"left","lineHeight":1,"maxRows":0,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(255,255,255,1)","textOverflow":"shrink","underline":false,"uppercase":false,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"word","style":{},"content":"New","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"UK","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"customers","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"only.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Min","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Stake:","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"£5.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Maximum","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Free","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Bet:","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"£30.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"First","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"bet","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"on","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"a","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Football,","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Horse","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Racing,","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Tennis,","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Cricket","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"or","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Basketball","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"multiple","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"with","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"3+","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"selections.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Overall","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"odds:","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"3.00","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"(2/1)","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"or","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"higher.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Free","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Bets","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"available","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"upon","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"settlement","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"of","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"the","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"qualifying","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"bet.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Earn","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"a","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"£30","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Uber","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Eats","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Voucher","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"on","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"successful","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Acca","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"qualification.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Debit","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Card","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"deposit","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"only","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"(exclusions","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"apply).","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Offer","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"is","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"valid","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"7","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"days","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"from","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"the","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"new","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"account","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"being","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"registered.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"18+","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Bet","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"the","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Responsible","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Way.","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Full","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Terms","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"apply.","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":0,"textOverflow":"shrink","characterSpacing":0,"lineHeight":1,"__fontFamilyId":""}},"assetId":"604f774d57e4ab0001a1bfd6","name":"KeyTermsText"},{"id":"b05ccd60-1d5b-4b9d-a92e-b656039d53f2","kind":"image","actions":[],"animations":[{"id":"6dc565c0-d8d7-400c-b20a-937f2470097d","type":"in","timingFunction":"linear","templateId":"fade-in","keyframes":[{"id":"6858aaaf-9046-4356-8fa8-7c97ca4c5d14","stateId":"af04e6a9-2473-4ae0-a404-2c2125621ca6","time":0,"duration":0},{"id":"00cb2676-1719-4f9e-821f-d36668d0250b","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{}},{"id":"a5ad57cb-7c99-4069-8072-28ab5c04f476","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"d53d4ee2-ec12-4de5-b90c-7168b9710e9f","time":2.59,"duration":0},{"id":"ed3b25fc-782e-493f-a258-1516bc631e4e","stateId":"c29839f8-3b5a-41b9-aa97-9fc13dfcb8a8","time":2.99,"timingFunction":"@timingFunction","duration":0}],"settings":{}}],"duration":2.99,"filters":{},"height":17,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"af04e6a9-2473-4ae0-a404-2c2125621ca6","opacity":0},{"id":"c29839f8-3b5a-41b9-aa97-9fc13dfcb8a8","opacity":0}],"time":6.61,"width":62,"x":60,"y":27,"imageSettings":{"x":0.5,"y":0.5,"quality":90,"sizeMode":"fit","highDpi":false},"imageAsset":{"id":"2085683","url":"https://c.bannerflow.net/accounts/betway/581701278d987c10bca61aed/published/13401030/15479919/8b4baa5a-2fec-43f3-aa33-612d4fc45f8e.png","width":688,"height":153},"name":"Compliance Logos"},{"id":"7294aa03-86e4-4822-834b-3ac473a0678f","kind":"image","actions":[],"animations":[{"id":"42dbaab3-0908-44b5-bc53-72311d686fd7","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"a6ffbb06-3ea9-4293-aa4a-fca6fb043d77","time":2.59,"duration":0},{"id":"dfd7ae58-ad18-408b-94e2-aaed6f752159","stateId":"c9a260b0-b529-4568-ad89-ef08b69505a9","time":2.99,"timingFunction":"@timingFunction","duration":0}]}],"duration":2.99,"filters":{},"height":18,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"c9a260b0-b529-4568-ad89-ef08b69505a9","opacity":0}],"time":6.6,"width":143,"x":129,"y":24,"imageSettings":{"x":0.5,"y":0.5,"quality":85,"sizeMode":"fit","highDpi":false},"imageAsset":{"id":"2101312","url":"https://c.bannerflow.net/accounts/betway/581701278d987c10bca61aed/published/13401030/15479919/e5a44c38-a3ed-4d03-b8b4-652beff225b7.png","width":5069,"height":892},"name":"Betway_Thierry_Henry_Lockup_2White"},{"id":"2de6372a-37ed-4b11-a197-508c50a82af0","kind":"text","actions":[],"animations":[],"duration":10,"filters":{},"height":6,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":0,"width":51,"x":8,"y":43,"characterSpacing":0,"fontSize":8,"horizontalAlignment":"left","lineHeight":1,"maxRows":0,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(0,0,0,1)","textOverflow":"shrink","underline":false,"uppercase":false,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"variable","style":{"variable":{"id":"60d0815c37670160b4539414","path":"TCText","fallback":"","type":"text","step":{"size":1,"start":1,"occurrence":"loop"},"spanId":"2de6372a-37ed-4b11-a197-508c50a82af0-cl-t-0-0"}},"content":"@TCText","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":0,"textOverflow":"shrink","characterSpacing":0,"lineHeight":1,"__fontFamilyId":""}},"assetId":"604f774d57e4ab0001a1bfd6","name":"smallTermsText"},{"id":"b1689892-7a78-45f3-9d66-e8d47f7b61cb","kind":"image","actions":[],"animations":[],"duration":10,"filters":{},"height":20,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":0,"width":129,"x":-57,"y":23,"imageSettings":{"x":0.5,"y":0.5,"quality":90,"sizeMode":"fit","highDpi":false},"imageAsset":{"id":"177197","url":"https://c.bannerflow.net/accounts/betway/581701278d987c10bca61aed/published/13401030/15479919/60247ad2-a231-4d4d-b281-7cee8fd1d189.svg","width":300,"height":63},"name":"bwLogo"},{"id":"8e65b722-fb8f-4dab-bf98-a1a7309d4553","kind":"button","actions":[],"animations":[{"id":"27c7f003-6dab-4ed6-a9db-837e05eeb8db","type":"in","timingFunction":"easeOutExpo","templateId":"slide-in","keyframes":[{"id":"687be96b-bd1f-48cf-9572-16fe78766507","stateId":"db67cece-61b2-4140-9f4e-ca958653a410","time":0,"duration":0},{"id":"a428073b-39b1-4b2d-88d3-18db4b93b185","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90}}},{"id":"c9305071-4813-4261-9243-f3a84f058d57","type":"out","timingFunction":"linear","templateId":"fade-out","keyframes":[{"id":"306079ee-0d83-4370-85df-b3284e69c837","time":7.7,"duration":0},{"id":"8803c22b-874e-4b21-8914-424ecf281ad7","stateId":"7547b22e-3645-4c34-b62f-3c1992a325ec","time":8.1,"timingFunction":"@timingFunction","duration":0}],"settings":{}},{"id":"9b574fd2-bb73-42b9-ab37-f2e2004db291","type":"keyframe","timingFunction":"easeInOutCubic","keyframes":[{"id":"af0bc1a2-e7ed-4c50-bb02-937bef48ec98","stateId":"7c4975b2-f2c1-40e1-89c8-9a5ab52a4732","time":2.8,"timingFunction":"easeInOutQuad","duration":0},{"id":"404a2150-da22-4c96-9271-b5fc65b4bd03","stateId":"2a201f72-c57c-49da-a794-9548a64baf0a","time":2.97,"timingFunction":"easeInOutQuad","duration":0.03},{"id":"bde76dbe-6462-4947-adee-58d3c71b601e","stateId":"e15aa3c4-e9bd-47e6-9907-49d640b7a1e8","time":3.18,"timingFunction":"easeOutQuad","duration":0},{"id":"1ad1eae8-d897-4a79-b2a8-d8a6964182a0","stateId":"b2796c6e-8b46-4620-8f02-f7c988c18c2d","time":3.37,"timingFunction":"easeInOutQuad","duration":0},{"id":"ede7bd92-bb87-441e-8edd-e7b48e4600ba","stateId":"9b063c83-cdc7-4184-83fe-4cc469846dd0","time":3.56,"timingFunction":"easeInOutQuad","duration":0.03},{"id":"1e005630-38ae-4198-8fdb-990ac2e4785c","stateId":"120eec94-1a8f-439f-a47c-8da51a655a68","time":3.78,"timingFunction":"easeOutQuad","duration":0}],"settings":{}}],"border":{"thickness":1,"style":"solid","color":"rgba(255,255,255,1)"},"duration":8.1,"fill":"rgba(0,153,0,1)","filters":{},"height":14,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":2,"topRight":2,"bottomRight":2,"bottomLeft":2},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"db67cece-61b2-4140-9f4e-ca958653a410","x":"@edgePoint(@transition.direction).x","y":"@edgePoint(@transition.direction).y"},{"id":"7547b22e-3645-4c34-b62f-3c1992a325ec","opacity":0},{"id":"7c4975b2-f2c1-40e1-89c8-9a5ab52a4732"},{"id":"e15aa3c4-e9bd-47e6-9907-49d640b7a1e8"},{"id":"2a201f72-c57c-49da-a794-9548a64baf0a","scaleX":1.16,"scaleY":1.16},{"id":"b2796c6e-8b46-4620-8f02-f7c988c18c2d"},{"id":"9b063c83-cdc7-4184-83fe-4cc469846dd0","scaleX":1.16,"scaleY":1.16},{"id":"120eec94-1a8f-439f-a47c-8da51a655a68"}],"time":1.49,"width":38,"x":277,"y":31,"characterSpacing":0,"fontSize":10,"horizontalAlignment":"center","lineHeight":1,"maxRows":1,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(255,255,255,1)","textOverflow":"shrink","underline":false,"uppercase":false,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"word","style":{},"content":"JOIN","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":1,"textOverflow":"shrink","characterSpacing":0,"lineHeight":1,"__fontFamilyId":""}},"assetId":"604f774c57e4ab0001a1bfd5","name":"Sports Button Pulse"},{"id":"227ba241-1b12-4a71-8440-79aa7233bdff","kind":"rectangle","actions":[],"animations":[],"border":{"thickness":1,"style":"solid","color":"rgba(35,35,35,1)"},"duration":10,"fill":"rgba(204,204,204,0)","filters":{},"height":50,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":0,"width":320,"x":0,"y":0},{"id":"0943a87b-a465-4f89-b600-f0acb54db8d3","kind":"widget","actions":[],"animations":[],"duration":10,"filters":{},"height":28,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[],"time":0,"width":306,"x":-798,"y":16,"html":"","css":"html, body {\n    padding: 0;\n    margin: 0;\n}","js":"class FilterFeed {\r\n    static by(filterSettings) {\r\n        this.settings = filterSettings;\r\n        if (Widget.properties.feedSource) {\r\n            if (this.feedId === Widget.properties.feedSource.id) {\r\n                // Apply filter\r\n                this.applyFilter(this.items);\r\n            }\r\n            else {\r\n                this.isLoading = true;\r\n                this.feedId = Widget.properties.feedSource.id;\r\n                ;\r\n                Widget.properties.feedSource.load().then((feedData) => {\r\n                    if (feedData && feedData.data && feedData.data.length > 2) {\r\n                        this.storeAndApplyFilter(feedData);\r\n                    }\r\n                    this.isLoading = false;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    static storeAndApplyFilter(feedData) {\r\n        // Store all feed items\r\n        this.allItems = feedData.data;\r\n        this.items = this.allItems.slice(0, 500);\r\n        // Apply filter\r\n        this.applyFilter(this.items);\r\n    }\r\n    static applyFilter(items) {\r\n        // Find matches\r\n        var matchingItems = this.findMatches(items);\r\n        // Order matches\r\n        if (this.settings.random === true && matchingItems.length > 1) {\r\n            matchingItems = this.randomizeOrder(matchingItems);\r\n        }\r\n        // Limit/cap items to include\r\n        if (this.settings.limit && this.settings.limit > 0) {\r\n            matchingItems = matchingItems.slice(0, this.settings.limit);\r\n        }\r\n        // Filter feed\r\n        if (matchingItems.length > 0) {\r\n            this.overrideFeed(matchingItems);\r\n        }\r\n    }\r\n    static findMatches(items) {\r\n        var matchingItems = items;\r\n        for (var i = 0; i < this.settings.filter.length; i++) {\r\n            var filter = this.settings.filter[i];\r\n            if (items[0][filter.field] && typeof items[0][filter.field].value == 'string') {\r\n                if (filter.method == 'contains') {\r\n                    matchingItems = matchingItems.filter(item => item[filter.field].value.indexOf(filter.filterByValue) > -1);\r\n                }\r\n                else {\r\n                    matchingItems = matchingItems.filter(item => item[filter.field].value == filter.filterByValue);\r\n                }\r\n            }\r\n        }\r\n        return matchingItems;\r\n    }\r\n    static randomizeOrder(array) {\r\n        var currentIndex = array.length;\r\n        var temporaryValue, randomIndex;\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n    static overrideFeed(newItems) {\r\n        Creative.setFeed(Widget.properties.feedSource.id, newItems);\r\n    }\r\n}\r\nFilterFeed.isLoading = false;\r\nWidget.on(WidgetEvent.PropertyChanged, () => {\r\n    var filterSettings = {\r\n        filter: [\r\n            {\r\n                field: Widget.properties.filterColumn,\r\n                filterByValue: Widget.properties.filterValue\r\n            }\r\n        ],\r\n        limit: 1,\r\n        random: true\r\n    };\r\n    FilterFeed.by(filterSettings);\r\n});\r\n","customProperties":[{"name":"filterColumn","unit":"text","value":{"text":"Region"},"versionPropertyId":"202409f3-8a4f-49ea-958b-021f49ca449b"},{"name":"filterValue","unit":"text","value":{"text":"EN"},"versionPropertyId":"01be17d0-4d87-4cf9-929a-ddd7aa71b703"},{"name":"feedSource","unit":"feed","value":{"id":"60d0815c37670160b4539414","path":"","step":{"occurrence":"loop","size":1,"start":1},"fallback":"","type":"text"}}],"name":"Feed Selector"},{"id":"28af4c42-cd9f-4933-91d1-7faa32b7dfe8","kind":"text","actions":[],"animations":[{"id":"9d066823-2c15-4234-bd1f-de7104f8b3e7","type":"in","timingFunction":"easeOutExpo","templateId":"ascend-in","keyframes":[{"id":"ab12c529-f5f1-45d8-b17f-b3844c8a10f4","stateId":"c1ab8d0c-5a15-4c7d-9d07-abb451223084","time":0,"duration":0},{"id":"c468b891-2d82-45b7-a045-3b3441dd0771","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90},"distance":{"name":"Distance","value":200}}}],"duration":6.2,"filters":{},"height":24,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"c1ab8d0c-5a15-4c7d-9d07-abb451223084","opacity":0,"x":"sin(@transition.direction * (pi / 180)) * @transition.distance","y":"-cos(@transition.direction * (pi / 180)) * @transition.distance"}],"time":0.4,"width":131,"x":64,"y":11,"characterSpacing":-0.01,"fontSize":22,"horizontalAlignment":"left","lineHeight":0.8,"maxRows":2,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(0,153,0,1)","textOverflow":"shrink","underline":false,"uppercase":true,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"word","style":{},"content":"Up","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"to","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"£30","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Matched","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Free","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Bet","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":2,"textOverflow":"shrink","characterSpacing":-0.01,"lineHeight":0.8,"__fontFamilyId":""}},"assetId":"6888c1379157100407f66974","name":"Text Fr1 Line 1 (1)"},{"id":"d2ec45b2-1e5b-4ade-a335-06f16b59ff4f","kind":"text","actions":[],"animations":[{"id":"d8d35c95-e74c-4578-af2f-03f248361328","type":"in","timingFunction":"easeOutExpo","templateId":"ascend-in","keyframes":[{"id":"1d523e27-3f69-4db3-8907-758d3253e069","stateId":"8fc3086b-af7c-4967-b1d9-bf0d56f9ae1c","time":0,"duration":0},{"id":"6c023e40-bc3b-48a9-ae8e-625392317399","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90},"distance":{"name":"Distance","value":200}}}],"duration":6.2,"filters":{},"height":9,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"8fc3086b-af7c-4967-b1d9-bf0d56f9ae1c","opacity":0,"x":"sin(@transition.direction * (pi / 180)) * @transition.distance","y":"-cos(@transition.direction * (pi / 180)) * @transition.distance"}],"time":0.4,"width":142,"x":64,"y":37,"characterSpacing":-0.01,"fontSize":12,"horizontalAlignment":"left","lineHeight":0.95,"maxRows":1,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(255,255,255,1)","textOverflow":"shrink","underline":false,"uppercase":true,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"word","style":{},"content":"if","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"your","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"first","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"acca","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"loses","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":1,"textOverflow":"shrink","characterSpacing":-0.01,"lineHeight":0.95,"__fontFamilyId":""}},"assetId":"6728f8863d79339d59043506","name":"Text Fr1 Line 2 (1)"},{"id":"fb818693-92cd-4ba4-9a4c-6a77430a11b4","kind":"text","actions":[],"animations":[{"id":"0e4ca4de-09fe-4bb2-b538-b3cb55b501ca","type":"in","timingFunction":"easeOutExpo","templateId":"ascend-in","keyframes":[{"id":"68118a06-1d15-46a8-9c6b-8ffaed973328","stateId":"94f904a0-13df-4ce2-9ed9-6a3a020c2470","time":0,"duration":0},{"id":"fb5d479d-e77c-4136-b4a2-a17e9d9d8ac5","time":0.4,"timingFunction":"@timingFunction","duration":0}],"settings":{"direction":{"name":"Direction","value":90},"distance":{"name":"Distance","value":200}}}],"duration":6.52,"filters":{},"height":10,"hidden":false,"mirrorX":false,"mirrorY":false,"opacity":1,"originX":0.5,"originY":0.5,"radius":{"type":"joint","topLeft":0,"topRight":0,"bottomRight":0,"bottomLeft":0},"rotationX":0,"rotationY":0,"rotationZ":0,"scaleX":1,"scaleY":1,"states":[{"id":"94f904a0-13df-4ce2-9ed9-6a3a020c2470","opacity":0,"x":"sin(@transition.direction * (pi / 180)) * @transition.distance","y":"-cos(@transition.direction * (pi / 180)) * @transition.distance"}],"time":0.08,"width":78,"x":65,"y":1,"characterSpacing":-0.01,"fontSize":54,"horizontalAlignment":"center","lineHeight":0.8,"maxRows":1,"padding":{"top":0,"left":0,"right":0,"bottom":0},"strikethrough":false,"textColor":"rgba(35,35,35,1)","textOverflow":"shrink","underline":false,"uppercase":true,"verticalAlignment":"middle","content":{"kind":0,"spans":[{"type":"word","style":{},"content":"New","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Customer","attributes":{}},{"type":"space","style":{},"content":" ","attributes":{}},{"type":"word","style":{},"content":"Offer","attributes":{}},{"type":"end","style":{},"content":"END","attributes":{}}],"style":{"padding":{"top":0,"left":0,"right":0,"bottom":0},"verticalAlignment":"middle","maxRows":1,"textOverflow":"shrink","characterSpacing":-0.01,"lineHeight":0.8,"__fontFamilyId":""}},"assetId":"5f9c11d7d7d1d200011f1c09","name":"Text Fr1 Line 1 (2)"}]},"env":{"FONTSERVICE_API_ORIGIN":"https://c.bannerflow.net/fs","IMAGE_OPTIMIZER_ORIGIN":"https://c.bannerflow.net/io","FEEDS_STORAGE_ORIGIN":"https://c.bannerflow.net/sfeeds","VIDEOS_STORAGE_ORIGIN":"https://c.bannerflow.net","SVG_IMAGE_OPTIMIZER_ORIGIN":"https://c.bannerflow.net/svg-io"}};});